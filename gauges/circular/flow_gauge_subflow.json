[
    {
        "id": "b603080c5881e58b",
        "type": "subflow",
        "name": "Gauge subflow v0.0.1",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "c6c07b308dc355e6"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "Group",
                "type": "ui-group",
                "value": "",
                "ui": {
                    "type": "conf-types"
                }
            },
            {
                "name": "Width",
                "type": "num",
                "value": "4",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "Height",
                "type": "num",
                "value": "4",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "min",
                "type": "num",
                "value": "0",
                "ui": {
                    "label": {
                        "en-US": "Min"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "max",
                "type": "num",
                "value": "10",
                "ui": {
                    "label": {
                        "en-US": "Max"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "sectors",
                "type": "json",
                "value": "[]",
                "ui": {
                    "label": {
                        "en-US": "Sectors"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "majorDivision",
                "type": "num",
                "value": "2",
                "ui": {
                    "label": {
                        "en-US": "Major Division"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "minorDivision",
                "type": "num",
                "value": "0.2",
                "ui": {
                    "label": {
                        "en-US": "Minor Division"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "valueDecimalPlaces",
                "type": "num",
                "value": "1",
                "ui": {
                    "label": {
                        "en-US": "Value Decimal Places"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "scaleDecimalPlaces",
                "type": "num",
                "value": "0",
                "ui": {
                    "label": {
                        "en-US": "Scale Decimal Places"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "label",
                "type": "str",
                "value": "gauge",
                "ui": {
                    "label": {
                        "en-US": "Label"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "measurement",
                "type": "str",
                "value": "measurement",
                "ui": {
                    "label": {
                        "en-US": "Measurement"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "unit",
                "type": "str",
                "value": "Â°C",
                "ui": {
                    "label": {
                        "en-US": "Units"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "needles",
                "type": "json",
                "value": "[{\"topic\":\"\",\"colour\":\"red\",\"lengthPercent\":100}]",
                "ui": {
                    "label": {
                        "en-US": "Needles"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7b0e53c2103b19d5",
        "type": "ui-template",
        "z": "b603080c5881e58b",
        "group": "${Group}",
        "page": "",
        "ui": "",
        "name": "Gauge template",
        "order": 1,
        "width": "${Width}",
        "height": "${Height}",
        "head": "",
        "format": "<!-- Gauge Template CDL v1.5.0\n  Based on original work by @HotNipi \n-->\n\n<script>\n    export default{\n        data(){\n            let data = {\n                // Min and max scale values.  Max may be less that min.\n                min:0,\n                max:1,\n                majorDivision: 10,       // number of input units for each (numbered) major division\n                minorDivision: 5,       // number of input units for each minor division\n                unit:\"\",\n                label:\"\",\n                measurement:\"\",\n                valueDecimalPlaces: 2,    // number of decimal places to show in the value display\n                scaleDecimalPlaces: 1,    // number of decimal places to show on the scale\n                // Coloured sectors around the scale.  Sectors can be in any order and it makes no difference if \n                // start and end are reversed.\n                //  Any gaps are left at background colour\n                sectors:[{start:0,end:0.4,color:\"skyblue\"},{start:0.4,end:0.75,color:\"green\"},{start:0.75,end:1.4,color:\"red\"}],\n                // need to have two dummy needles as DOM elements need to be already defined when transform and rotate centre setup\n                // need to find a better way to do this\n                needles: [{topic: \"a\", lengthPercent: 100, colour: \"black\"},{topic: \"b\", lengthPercent: 100, colour: \"black\"}],\n\n                // The position and alignment of the gauge inside the 100x100 svg box for the widget can be changed by modifying the settings below\n                // The origin of the svg box is the top left hand corner. The bottom right hand corner is 100,100\n                // Obviously, if you move the gauge you may have to move the text fields also.\n                // Take care with these settings, if you put silly values in the browser showing the dashboard may lock up. If this happens,\n                // close the dashboard browser tab (which may take some time as it is locked up).\n                arc: {\n                    cx:50,              // the x and y coordinates of the centre of the gauge arc\n                    cy: 64, \n                    radius: 47.5,       // the radius of the arc\n                    startDegrees: -123, // the angle of the start and end points of the arc.  Zero is vertically up from the centre\n                    endDegrees: 123,    // +ve values are clockwise\n                },\n                //arc: {cx:50, cy: 64.383, radius: 47.5, startDegrees: -120, endDegrees:45}  //??\n                //arc: {cx:50, cy: 64.383, radius: 47.5, startDegrees: 60, endDegrees:45}  //??\n\n                //don't change these\n                value: null,\n            }\n            // calculate derived values\n            // make sure startDegrees < endDegrees, but the difference is <= 360\n            while (data.arc.startDegrees >= data.arc.endDegrees) {\n                data.arc.startDegrees -= 360\n            }\n            while (data.arc.endDegrees - data.arc.startDegrees > 360) {\n                data.arc.startDegrees += 360\n            }\n            const startRadians = data.arc.startDegrees * Math.PI/180\n            const endRadians = data.arc.endDegrees * Math.PI/180\n            data.arc.startx = data.arc.cx - data.arc.radius * Math.sin(startRadians-Math.PI)\n            data.arc.starty = data.arc.cy + data.arc.radius * Math.cos(startRadians-Math.PI)\n            data.arc.endx = data.arc.cx + data.arc.radius * Math.sin(Math.PI-endRadians)\n            data.arc.endy = data.arc.cy + data.arc.radius * Math.cos(Math.PI-endRadians)\n            data.arc.arcLength = 2 * Math.PI * data.arc.radius * (data.arc.endDegrees - data.arc.startDegrees)/360\n\n            // sanity checks - probably there should be more of these\n            this.majorDivision = this.majorDivision <= 0  ?  1  : this.majorDivision\n            this.minorDivision = this.minorDivision <= 0  ?  1  : this.minorDivision\n            return data\n        }\n    }\n</script>\n\n<template>\n    <div class=\"hn-sng\">\n        <div class=\"label\">{{label}}</div>\n        <svg ref=\"hn-gauge\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\">\n            <g>\n                <path v-for=\"(item, index) in sectors\" :key=\"index\" :ref=\"'sector-' + index\" class=\"sector\" stroke-width=\"5\" :d=\"arcspec\" ></path>                \n            </g>\n            <g>\n                <path class=\"tick-minor\" stroke-width=\"5\" :d=\"arcspec\" :style=\"tickStyle(this.minorDivision, 0.5)\"></path>\n                <path ref=\"arc\" class=\"tick-major\" stroke-width=\"5\" :d=\"arcspec\" :style=\"tickStyle(this.majorDivision, 1)\"></path>\n                \n            </g>         \n            <g>\n                <text v-for=\"(item, index) in numbers\" :key=\"index\" class=\"num\" text-anchor=\"middle\" :y=\"`${10.5-this.arc.radius}`\" \n                  :style=\"`rotate: ${item.r}deg; transform-origin: ${this.arc.cx}% ${this.arc.cy}%; transform: translate(${this.arc.cx}%, ${this.arc.cy}%)`\">\n                  {{item.n}}</text>\n            </g>\n            <g>\n                <text class=\"measurement\" y=\"48\" x=\"50%\" text-anchor=\"middle\">{{measurement}}</text>\n                <text class=\"unit\" y=\"75\" x=\"50%\" text-anchor=\"middle\">{{unit}}</text>\n                <text class=\"value\" y=\"90\" x=\"50%\" text-anchor=\"middle\">{{formattedValue}}</text>\n            </g>\n            <g v-for=\"(item, index) in needles\" :ref=\"'o-needle-'+index\" class=\"o-needle\" v-html=\"needle(needles[index].lengthPercent,needles[index].colour)\">\n            </g>\n        </svg>\n    </div>\n</template>\n\n<script>\n    export default{\n        methods:{\n            getElement: function(name,base){\n                if(base){\n                    return this.$refs[name]\n                }\n                //if (!this.$refs[name]) console.log(`ref: ${name}`)\n                return this.$refs[name][0]\n            },\n            validate: function(data){\n                let ret                \n                if(typeof data !== \"number\"){\n                    ret = parseFloat(data)\n                    if(isNaN(ret)){\n                        console.log(\"BAD DATA! gauge id:\",this.id,\"data:\",data)\n                        ret = null\n                    }\n                }                    \n                else{\n                    ret = data\n                }                \n                return ret\n            },\n            range:function (n, p, r) {\n                // clamp n to be within input range\n                if (p.maxIn > p.minIn) {\n                    n = Math.min(n, p.maxIn)\n                    n = Math.max(n, p.minIn)\n                } else {\n                    n = Math.min(n, p.minIn)\n                    n = Math.max(n, p.maxIn)\n                }\n                if(r){\n                    return Math.round(((n - p.minIn) / (p.maxIn - p.minIn) * (p.maxOut - p.minOut)) + p.minOut);\n                }\n                return ((n - p.minIn) / (p.maxIn - p.minIn) * (p.maxOut - p.minOut)) + p.minOut;\n            },\n            generateNumbers:function(min,max,majorDivision){    \n                let minDegrees, maxDegrees, startValue\n                if (max > min) {\n                    minDegrees = this.arc.startDegrees\n                    maxDegrees = this.arc.endDegrees\n                    startValue = min    \n                } else {\n                    minDegrees = this.arc.endDegrees\n                    maxDegrees = this.arc.startDegrees\n                    startValue = max              \n                }\n                // Calculate number of major divisions, adding on a bit and rounding down in case last one is just off the end\n                const numDivs = Math.floor(Math.abs(max-min) / majorDivision + 0.1)\n                const degRange = maxDegrees-minDegrees\n                const degPerDiv = degRange * majorDivision/Math.abs(max-min)\n                let nums = []\n                for (let div=0; div<=numDivs; div++) {\n                    let degrees = div*degPerDiv + minDegrees\n                    const n = (startValue + div * majorDivision).toFixed(this.scaleDecimalPlaces)\n                    nums.push({r: degrees, n: n})\n                }\n                return nums \n            },\n            sectorData:function(full){               \n                let ret = []\n                this.sectors.forEach((sector,idx) => {\n                    let sec = {name:'sector-'+idx,color:sector.color}\n                    const params = {minIn:this.min, maxIn:this.max, minOut:0, maxOut:full}\n                    const start = this.range(sector.start,params,false)\n                    const end = this.range(sector.end,params,false)\n                    const pos = Math.min(start, end)\n                    const span = Math.max(start, end) - pos\n                    sec.css = `0 ${pos} ${span} var(--dash)`\n                    ret.push(sec)\n                })\n                return ret\n            },\n            rotation:function(v){\n                // allow pointer to go 10% off ends of scale, but not more than half way to the other end of the scale\n                const deltaDeg = this.arc.endDegrees - this.arc.startDegrees\n                const gapDeg = 360 - deltaDeg\n                const overflowFactor = Math.min(0.1, gapDeg/2/deltaDeg)\n                const overflow = (this.max-this.min)*overflowFactor\n                const angleOverflow = (deltaDeg)*overflowFactor \n                const min = this.min - overflow\n                const max = this.max + overflow\n                const minAngle = this.arc.startDegrees - angleOverflow\n                const maxAngle = this.arc.endDegrees + angleOverflow\n                const params = {minIn:min, maxIn:max, minOut:minAngle, maxOut:maxAngle};\n                if (v === null) {\n                    v = Math.min(min, max)\n                }\n                return `${this.range(v,params,false)}deg`\n            },\n            tickStyle: function(division, width) {\n                // division is the number of input units per tick\n                // width is the width (length?) of the tick in svg units\n\n                // total arc length in svg units\n                const arcLength = this.arc.arcLength\n                // length in user units\n                const range = Math.abs(this.max - this.min)\n                const tickPeriod = division/range * arcLength\n                // marker is width wide, so gap is tickPeriod-width\n                // stroke-dashoffset sets the first tick to half width\n                return `stroke-dasharray: ${width} ${tickPeriod-width}; stroke-dashoffset: ${width/2};`\n            },\n            pickupProperties: function() {\n                // pickup subflow properties from this.msg._data\n                this.data = this.msg._data\n                this.min = Number(this.data.min)\n                this.max = Number(this.data.max)\n                this.sectors = this.data.sectors\n                this.majorDivision = Number(this.data.majorDivision)\n                this.minorDivision = Number(this.data.minorDivision)\n                this.valueDecimalPlaces = Number(this.data.valueDecimalPlaces)\n                this.scaleDecimalPlaces = Number(this.data.scaleDecimalPlaces)\n                this.label = this.data.label\n                this.unit = this.data.unit\n                this.measurement = this.data.measurement\n                this.needles = this.data.needles\n                \n                // this is the first message so do the initial setup\n                const dal = this.getElement('arc',true).getTotalLength()\n                const sec = this.sectorData(dal)              \n                const gauge = this.getElement('hn-gauge',true)\n                gauge.style.setProperty('--dash',dal)\n                sec.forEach(s =>{\n                    const sector = this.getElement(s.name,false)\n                    sector.style.setProperty(\"stroke-dasharray\",s.css)\n                    sector.style.setProperty(\"stroke\",s.color)\n                })\n                // set the needle centre of rotation\n                this.needles.forEach((needle, index) => {\n                    const element = this.getElement(`o-needle-${index}`,false)\n                    element.style[\"transform-origin\"] = `${this.arc.cx}% ${this.arc.cy}%`\n                    // initialise the needle off the bottom\n                    element.style.rotate = this.rotation(null) \n                })\n            },\n            needle: function(lengthPercent, colour) {\n                const cx = this.arc.cx\n                const cy = this.arc.cy\n                const length = (this.arc.radius - 4.5) * lengthPercent/100\n                return `<path d=\"M ${cx},${cy} ${cx-1.5},${cy} ${cx-0.15},${cy-length} ${cx+0.15},${cy-length} ${cx+1.5},${cy} z\"\n                  fill=\"${colour}\"></path> \n                  <circle cx=\"${this.arc.cx}\" cy=\"${this.arc.cy}\" r=\"3\"></circle>`\n            },\n        },\n        watch: {\n            msg: function(){\n                console.log(`msg: ${JSON.stringify(this.msg)}`)\n                // pick up the subflow config values if they have changed\n                if (!this.data) {\n                    console.log(\"data changed\")\n                    this.pickupProperties()\n                }\n                // if only one needle then use the value in msg.payload\n                if (this.needles.length === 1) {\n                    // allow undefined payload through as it will show the invalid data state\n                    const v = this.validate(this.msg.payload)                   \n                    // v is null if payload is invalid, this is coped with then it is displayed\n                    this.value = v\n                    this.getElement('o-needle-0',false).style.rotate = this.rotation(this.value)\n                } else {\n                    // more than one needle, the values are joined by topic in msg.payload\n                    this.needles.forEach((needle, index) => {\n                        const v = this.validate(this.msg.payload[this.needles[index].topic])\n                        // the value displayed is from the first needle\n                        if (index === 0) {\n                            // v is null if payload is invalid, this is coped with then it is displayed\n                            this.value = v\n                        }\n                        this.getElement(`o-needle-${index}`,false).style.rotate = this.rotation(v)\n                    })\n                }\n            }\n        },\n        computed: {\n            arcspec: function() {\n                const delta = this.arc.endDegrees - this.arc.startDegrees\n                // if more than 180 deg sweep then large-arg-flag should be 1\n                const largeArcFlag = delta > 180  ?  1  :  0\n\n                return `M ${this.arc.startx} ${this.arc.starty} A ${this.arc.radius} ${this.arc.radius} 0 ${largeArcFlag} 1 ${this.arc.endx} ${this.arc.endy}`\n            },\n            formattedValue: function () {\n                // Show --- for the value until a valid value is recevied\n                return this.value !== null  ?  this.value.toFixed(this.valueDecimalPlaces)  :  \"---\"\n            },\n            numbers:function(){\n                return this.generateNumbers(this.min,this.max,this.majorDivision)\n            },\n        },\n        mounted(){\n        }\n\n    }\n</script>\n\n<style>\n    .hn-sng{\n        position:relative;\n    }\n    .hn-sng .label{\n        position:absolute;\n        font-size:1rem;\n        color:currentColor;\n        text-align:center;\n        width:100%;\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n    }\n    .hn-sng .value {\n        fill:currentColor;\n    }\n    .hn-sng .unit {\n        fill:currentColor;\n        font-size:0.4rem;\n    }\n    .hn-sng .measurement {\n        fill:currentColor;\n        font-size:0.5rem;\n    }\n    .hn-sng .num{\n        fill:currentColor;\n        fill-opacity:0.6;\n        font-size:.35rem;\n    }\n    .hn-sng .tick-minor{\n        fill:none;\n        stroke:currentColor;\n        stroke-opacity:0.6;\n    }\n    .hn-sng .tick-major{\n        fill:none;\n        stroke:currentColor;\n    }\n    .hn-sng .sector{        \n        fill:none;\n        stroke:transparent;      \n    } \n    .hn-sng .o-needle{        \n        transition:.5s;\n    }\n    \n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "Gauge template",
        "x": 920,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "c6c07b308dc355e6",
        "type": "function",
        "z": "b603080c5881e58b",
        "name": "Load subflow properties into msg._data",
        "func": "/**  Preparator function for gauge template\n * \n * Expects:\n * \n * Builds messages for sending to the template from the data provided in subflow config\n */\n\nmsg._data = buildData()\nreturn msg;\n\nfunction buildData() {\n    // builds the data object to be passed to the gauge from the env vars\n    let _data = {}\n    const vars = [\"min\", \"max\", \"sectors\", \"majorDivision\", \"minorDivision\", \"valueDecimalPlaces\", \"scaleDecimalPlaces\", \"label\", \"measurement\", \n      \"unit\", \"needles\"]\n    vars.forEach((v) => _data[v] = env.get(v))\n    return _data\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "db2c316a64197c5c"
            ]
        ]
    },
    {
        "id": "2b8b977e0ba829b3",
        "type": "inject",
        "z": "b603080c5881e58b",
        "name": "Trigger subflow properties preload",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 200,
        "wires": [
            [
                "c6c07b308dc355e6"
            ]
        ]
    },
    {
        "id": "db2c316a64197c5c",
        "type": "function",
        "z": "b603080c5881e58b",
        "name": "Join needle values",
        "func": "/** If there is more than one needle specified then join the payloads using topics \n */\nif (msg._data.needles.length > 1) {\n    let payloads = context.get(\"payloads\") || {}\n    // ignore this payload if there is not a good topic\n    if (msg.topic  &&  typeof msg.topic === \"string\"  &&  msg.topic.length > 0) {\n        payloads[msg.topic] = msg.payload\n        context.set(\"payloads\", payloads)\n    }\n    msg.payload = payloads\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 120,
        "wires": [
            [
                "7b0e53c2103b19d5"
            ]
        ]
    },
    {
        "id": "3ab827cb8f00014a",
        "type": "subflow:b603080c5881e58b",
        "z": "997da33a0beedade",
        "name": "Gauge subflow test",
        "env": [
            {
                "name": "Group",
                "value": "4f87bd59a15b847e",
                "type": ""
            },
            {
                "name": "min",
                "value": "-5",
                "type": "num"
            },
            {
                "name": "max",
                "value": "5",
                "type": "num"
            },
            {
                "name": "sectors",
                "value": "[{\"start\":-5,\"end\":0.4,\"color\":\"skyblue\"},{\"start\":0.4,\"end\":0.75,\"color\":\"green\"},{\"start\":0.75,\"end\":5,\"color\":\"red\"}]",
                "type": "json"
            },
            {
                "name": "majorDivision",
                "value": "1",
                "type": "num"
            },
            {
                "name": "needles",
                "value": "[{\"topic\":\"A\",\"colour\":\"black\",\"lengthPercent\":100},{\"topic\":\"B\",\"colour\":\"brown\",\"lengthPercent\":67}]",
                "type": "json"
            },
            {
                "name": "Min",
                "value": "-0.2",
                "type": "num"
            },
            {
                "name": "Max",
                "value": "1.4",
                "type": "num"
            },
            {
                "name": "Sectors",
                "value": "[{\"start\":0,\"end\":0.4,\"color\":\"skyblue\"},{\"start\":0.4,\"end\":0.75,\"color\":\"green\"},{\"start\":0.75,\"end\":1.4,\"color\":\"red\"}]",
                "type": "json"
            }
        ],
        "x": 530,
        "y": 2960,
        "wires": []
    },
    {
        "id": "fb994f32ce900dda",
        "type": "inject",
        "z": "997da33a0beedade",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "B",
        "payload": "4.5",
        "payloadType": "num",
        "x": 230,
        "y": 3020,
        "wires": [
            [
                "3ab827cb8f00014a"
            ]
        ]
    },
    {
        "id": "1cc323e3807f1bf0",
        "type": "inject",
        "z": "997da33a0beedade",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "55",
        "payloadType": "num",
        "x": 230,
        "y": 3060,
        "wires": [
            [
                "3ab827cb8f00014a"
            ]
        ]
    },
    {
        "id": "b2dff1648d75190c",
        "type": "inject",
        "z": "997da33a0beedade",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "A",
        "payload": "0",
        "payloadType": "num",
        "x": 230,
        "y": 2900,
        "wires": [
            [
                "3ab827cb8f00014a"
            ]
        ]
    },
    {
        "id": "fab47402dd5e5d0e",
        "type": "inject",
        "z": "997da33a0beedade",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "A",
        "payload": "1.4",
        "payloadType": "num",
        "x": 230,
        "y": 2980,
        "wires": [
            [
                "3ab827cb8f00014a"
            ]
        ]
    },
    {
        "id": "86425b5f334621b8",
        "type": "inject",
        "z": "997da33a0beedade",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "B",
        "payload": "0.6",
        "payloadType": "num",
        "x": 230,
        "y": 2940,
        "wires": [
            [
                "3ab827cb8f00014a"
            ]
        ]
    },
    {
        "id": "a17da6d1a0739673",
        "type": "inject",
        "z": "997da33a0beedade",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "A",
        "payload": "invalid data",
        "payloadType": "str",
        "x": 270,
        "y": 3100,
        "wires": [
            [
                "3ab827cb8f00014a"
            ]
        ]
    },
    {
        "id": "b4839e916817a5bf",
        "type": "inject",
        "z": "997da33a0beedade",
        "name": "No payload",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "invalid data",
        "x": 290,
        "y": 3180,
        "wires": [
            [
                "3ab827cb8f00014a"
            ]
        ]
    },
    {
        "id": "3d3c3d42fc45a684",
        "type": "inject",
        "z": "997da33a0beedade",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "-1.4",
        "payloadType": "num",
        "x": 290,
        "y": 3220,
        "wires": [
            [
                "3ab827cb8f00014a"
            ]
        ]
    },
    {
        "id": "09c96ce578d1976d",
        "type": "inject",
        "z": "997da33a0beedade",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "B",
        "payload": "invalid data",
        "payloadType": "str",
        "x": 270,
        "y": 3140,
        "wires": [
            [
                "3ab827cb8f00014a"
            ]
        ]
    }
]