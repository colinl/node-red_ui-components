[
    {
        "id": "c7783f078c2779c4",
        "type": "group",
        "z": "bdd7be38.d3b55",
        "name": "Guaranteed delivery - Group to export to node-red_ui-components",
        "style": {
            "label": true
        },
        "nodes": [
            "942a39d9fd40c8ca",
            "b39ee7fb2a8b6520",
            "6db06311eb1ad06e",
            "579e484c5f397f83",
            "3c72118d0c1de09a",
            "aca8304f8d733744",
            "329b1ce0fc790e0b",
            "74d43e94d1ab0916"
        ],
        "x": 34,
        "y": 4939,
        "w": 1042,
        "h": 202
    },
    {
        "id": "149380c1.63e107",
        "type": "subflow",
        "name": "Guaranteed delivery",
        "info": "A node-red node to facilitate guaranteed delivery of messages (upload, email, MQTT etc) across a network\n\nThis node facilitates the guaranteed delivery of data across a network or via some other route,\nwhere it may not always be possible to send the data, due to network outage or server not available.\nIf a send fails then messages are automatically buffered in a queue and the send is retried later.\nMessages are guaranteed to be sent in the order they are received.\nIf persistent context is configured then the queue can be retained there so that the queue will survive\na node-red restart or power down.\n\nTo use the node it should ideally possible to derive a success message when the data has been successfully delivered, and a fail message if it fails.\nIn some circumstances it may not be possible to know that it has failed, in which case a timeout setting can be used to tell the node that if no\nsuccess is received within a certain time then it should assume that the send has failed.\n\nTo use this node feed it messages to be delivered.  Connect the output to the nodes that deliver it (to an email node for example).\n",
        "category": "function",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "6a3f78ab.f6b8e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 140,
                "wires": [
                    {
                        "id": "6a3f78ab.f6b8e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "controlProperty",
                "type": "str",
                "value": "control",
                "ui": {
                    "label": {
                        "en-US": "Property for OK or FAIL"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "OKValue",
                "type": "str",
                "value": "OK",
                "ui": {
                    "label": {
                        "en-US": "Value for success"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "FAILValue",
                "type": "str",
                "value": "FAIL",
                "ui": {
                    "label": {
                        "en-US": "Value for failure"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "retrySecs",
                "type": "num",
                "value": "60",
                "ui": {
                    "label": {
                        "en-US": "Retry period (secs)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "timeout",
                "type": "num",
                "value": "120",
                "ui": {
                    "label": {
                        "en-US": "Fail timeout (secs)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "maxQueue",
                "type": "num",
                "value": "100",
                "ui": {
                    "label": {
                        "en-US": "Max messages in queue"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "contextStore",
                "type": "str",
                "value": "default",
                "ui": {
                    "label": {
                        "en-US": "Context Store to use"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "@colinl/guaranteed-delivery",
            "type": "guaranteed-delivery",
            "version": "0.0.2 Beta",
            "author": "Colin Law",
            "desc": "Guaranteed delivery of messages",
            "keywords": "node-red, delivery",
            "license": "Apache-2.0"
        },
        "color": "#3FADB5",
        "icon": "font-awesome/fa-long-arrow-right",
        "status": {
            "x": 420,
            "y": 80,
            "wires": [
                {
                    "id": "ed779289.25b5d8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "6a3f78ab.f6b8e",
        "type": "function",
        "z": "149380c1.63e107",
        "name": "State machine",
        "func": "let store = env.get(\"contextStore\")\nif (store === \"default\") store = null\n// These are initialised in On Start\nlet stat = flow.get(\"stat\", store)\nif (!stat) node.warn(`stat: ${JSON.stringify(stat)}, store: ${store}`)\nlet tickID = flow.get(\"tickID\")\n\n// can't use a switch here I think as need to compare against env value\nconst control = msg[env.get(\"controlProperty\")]\n\nif (control === env.get(\"OKValue\")) {\n    handleOK(stat)\n} else if (control === env.get(\"FAILValue\")) {\n    handleFAIL(stat)\n} else if (control === \"__tick\") {\n    handleRetryTick(stat)\n} else {\n    // no valid control value so must be incoming message\n    handleMessage(msg, stat)\n}\n//node.warn(`state: ${stat.state}`)\n// decide what to do next based on the new state\nswitch (stat.state) {\n    case \"initial\":\n    case \"waitingForMsg\":\n        sendMsg(stat)   // send next message if any\n        if (stat.state == \"waitingForOKFail\") {\n            // we have sent a message so start the timeout timer if required\n            // there should not be a timer running already\n            if (tickID) {\n                node.warn(`Guaranteed delivery timer already running when it should not be ${tickID}`)\n                clearTimeout(tickID)\n            }\n            const timeout = env.get(\"timeout\")\n            if (timeout) {\n                //node.warn(`starting timer`)\n                tickID = setTimeout( handleTimeout, timeout*1000)\n                flow.set(\"tickID\", tickID )\n            }\n        }\n        break;\n        \n    case \"waitingForRetryTick\":\n    case \"waitingForOKFail\":\n        // do nothing\n        break;\n}\nnode.status( `${stat.queue.length} ${stat.state}` )\nflow.set(\"stat\", stat, store)\nreturn null;\n\n// Called when message to be queued is received\nfunction handleMessage(msg, stat) {\n    //node.warn(\"handleMessage\")\n    // push a clone onto the queue\n    stat.queue.push(RED.util.cloneMessage(msg))\n    // limit number in queue\n    const max = Number(env.get(\"maxQueue\"))\n    if (!isNaN(max) && max > 0) {\n        // max length hit, remove oldest\n        if (stat.queue.length > max) stat.queue.shift()\n    }\n    // Simulate a RetryTick event to handle any state change needed\n    handleRetryTick(stat)\n}\n\n// Called to send the next message off the queue if any, but leaves it on queue\n// If it sends a message then it starts the timeout (if any) running and returns the handle\nfunction sendMsg(stat) {\n    //node.warn(\"sendMsg\")\n    let thisMsg = stat.queue[0]\n    if (thisMsg) {\n        // send a clone\n        //node.warn(\"sending\")\n        node.send(RED.util.cloneMessage(thisMsg))\n        stat.state = \"waitingForOKFail\"\n    } else {\n        // nothing in queue\n        stat.state = \"waitingForMsg\"\n    }\n}\n\n// Called when OK response received\nfunction handleOK(stat) {\n    //node.warn(\"handleOK\")\n    // ignore if in wrong state\n    if (stat.state === \"waitingForOKFail\") {\n        // OK received so drop the top message \n        stat.queue.shift()\n        // stop the timer\n        if (tickID) {\n            clearTimeout(tickID)\n            flow.set(\"tickID\", 0 )\n            tickID = 0\n        }\n        // set the state to waiting for message, which will allow the next one to be sent\n        stat.state = \"waitingForMsg\"\n    } else {\n        node.warn(\"Guaranteed delivery - ignoring unnexpected OK\")\n    }\n}\n\n// Called when FAIL response received\nfunction handleFAIL(stat) {\n    //node.warn(\"handleFAIL\")\n    // ignore if in wrong state\n    if (stat.state === \"waitingForOKFail\") {\n        // FAIL received so stop timer and go to waiting for RetryTick state\n        if (tickID) {\n            clearTimeout(tickID)\n            flow.set(\"tickID\", 0 )\n            tickID = 0\n        }\n        stat.state = \"waitingForRetryTick\"\n    } else {\n        node.warn(\"Guaranteed delivery - ignoring unnexpected FAIL\")\n    }\n}\n\n// Called when a RetryTick message is received or after a new incoming message is queued\nfunction handleRetryTick(stat) {\n    //node.warn(\"handleRetryTick\")\n    if (stat.state === \"waitingForRetryTick\") {\n        //node.warn(\"state to waiting\")\n        // set it to watitingForMsg in order to force send \n        stat.state = \"waitingForMsg\"\n    }\n    // ignore for other states\n}\n\n// called when no OK or FAIL has been received after the specied timeout\nfunction handleTimeout() {\n    //node.warn(`handleTimeout ${stat.state}`)\n    // ignore if state not waiting for ok/fail\n    if ( stat.state === \"waitingForOKFail\" ) {\n        //node.warn(`Timeout waiting for OK/FAIL`)\n        // simulate a fail, just change the state to WaitingForRetryTick\n        stat.state = \"waitingForRetryTick\"\n        flow.set(\"stat\", stat, store)\n        node.status( `${stat.queue.length} ${stat.state}` )\n    }\n    flow.set(\"tickID\", 0 )\n    tickID = 0\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Initalise context data as appropriate\nlet cStore = env.get(\"contextStore\")\nif (cStore === \"default\") cStore = null\nlet stat = flow.get(\"stat\", cStore) || {state: \"initial\", queue: []}\n// force state to initial in case we were stopped in the middle of doing something and the store is persistent\n// keep the queue obviously\nstat.state = \"initial\"\nflow.set(\"stat\", stat, cStore)\n// clear the timout ticker in case the default store is persistent\nflow.set(\"tickID\", 0)",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "602725f6.15eee4",
        "type": "inject",
        "z": "149380c1.63e107",
        "name": "Retry ",
        "props": [
            {
                "p": "${controlProperty}",
                "v": "__tick",
                "vt": "str"
            }
        ],
        "repeat": "${retrySecs}",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "6a3f78ab.f6b8e"
            ]
        ]
    },
    {
        "id": "ed779289.25b5d8",
        "type": "status",
        "z": "149380c1.63e107",
        "name": "",
        "scope": [
            "6a3f78ab.f6b8e"
        ],
        "x": 300,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "942a39d9fd40c8ca",
        "type": "subflow:149380c1.63e107",
        "z": "bdd7be38.d3b55",
        "g": "c7783f078c2779c4",
        "name": "",
        "env": [
            {
                "name": "retrySecs",
                "value": "20",
                "type": "num"
            },
            {
                "name": "timeout",
                "value": "10",
                "type": "num"
            }
        ],
        "x": 660,
        "y": 4980,
        "wires": [
            [
                "74d43e94d1ab0916"
            ]
        ]
    },
    {
        "id": "b39ee7fb2a8b6520",
        "type": "inject",
        "z": "bdd7be38.d3b55",
        "g": "c7783f078c2779c4",
        "name": "Send test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "to",
                "v": "clanlaw@gmail.com",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "email subject",
        "payload": "This is the email contents",
        "payloadType": "str",
        "x": 140,
        "y": 4980,
        "wires": [
            [
                "6db06311eb1ad06e"
            ]
        ]
    },
    {
        "id": "6db06311eb1ad06e",
        "type": "function",
        "z": "bdd7be38.d3b55",
        "g": "c7783f078c2779c4",
        "name": "Message counter",
        "func": "let count = context.get(\"count\") || 0\nmsg.payload = `Message number ${count}`\ncontext.set(\"count\", count + 1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 370,
        "y": 4980,
        "wires": [
            [
                "942a39d9fd40c8ca"
            ]
        ]
    },
    {
        "id": "579e484c5f397f83",
        "type": "change",
        "z": "bdd7be38.d3b55",
        "g": "c7783f078c2779c4",
        "name": "OK",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "OK",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 5060,
        "wires": [
            [
                "6db06311eb1ad06e"
            ]
        ]
    },
    {
        "id": "3c72118d0c1de09a",
        "type": "change",
        "z": "bdd7be38.d3b55",
        "g": "c7783f078c2779c4",
        "name": "FAIL",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "FAIL",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 5100,
        "wires": [
            [
                "6db06311eb1ad06e"
            ]
        ]
    },
    {
        "id": "aca8304f8d733744",
        "type": "inject",
        "z": "bdd7be38.d3b55",
        "g": "c7783f078c2779c4",
        "name": "OK",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 5060,
        "wires": [
            [
                "579e484c5f397f83"
            ]
        ]
    },
    {
        "id": "329b1ce0fc790e0b",
        "type": "inject",
        "z": "bdd7be38.d3b55",
        "g": "c7783f078c2779c4",
        "name": "FAIL",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 5100,
        "wires": [
            [
                "3c72118d0c1de09a"
            ]
        ]
    },
    {
        "id": "74d43e94d1ab0916",
        "type": "debug",
        "z": "bdd7be38.d3b55",
        "g": "c7783f078c2779c4",
        "name": "SEND",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 4980,
        "wires": []
    }
]
