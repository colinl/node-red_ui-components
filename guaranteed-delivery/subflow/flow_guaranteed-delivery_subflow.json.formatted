[
    {
        "id": "c7783f078c2779c4",
        "type": "group",
        "z": "bdd7be38.d3b55",
        "name": "Guaranteed delivery - Group to export to node-red_ui-components",
        "style": {
            "label": true
        },
        "nodes": [
            "942a39d9fd40c8ca",
            "b39ee7fb2a8b6520",
            "6db06311eb1ad06e",
            "579e484c5f397f83",
            "3c72118d0c1de09a",
            "aca8304f8d733744",
            "329b1ce0fc790e0b",
            "74d43e94d1ab0916"
        ],
        "x": 34,
        "y": 4939,
        "w": 1042,
        "h": 202
    },
    {
        "id": "149380c1.63e107",
        "type": "subflow",
        "name": "Guaranteed delivery",
        "info": "Facilitates guaranteed delivery of messages (upload, email, MQTT etc) across a network

Used to guarantee the delivery of data across a network, or via some other route, where it may not always be possible to send the data, due to network outage or server not available. If a send fails then messages are automatically buffered in a queue and the send is retried later. Messages are guaranteed to be sent in the order they are received.

See the [node's readme](https://github.com/colinl/node-red-guaranteed-delivery/) for full usage details and for importable example flows.

### Configuration

##### Property for OK/FAIL
This defines which message property will be used to indicate that a message is a Control message, not one to be sent on for delivery.

##### Value for success
This defines the contents of the control property that will indicate that a message has been successfully sent.

##### Value for failure
This defines the contents of the control property that will indicate that an attempt to send a message has failed.

##### Retry period (secs)
When a message fails to be sent then after this time the node will pass it on again for another attempt

##### Fail timeout (secs)
If the node does not receive OK or FAIL after passing on a message, then after this time it will assume that it has failed.  This can be used on occasions where a timeout is the only way of knowing that it has failed, but it is also a good idea to set a value here longer than it will normally take for success or failure, in case a message gets lost.  This prevents a permanent lockup situation.  Setting this to 0 disables the timeout.

##### Max messages in queue
If this is non-zero then it will limit the number of messages held in the queue, once the queue is full then further messages received will be discarded.  If this is set to zero then no limit will be applied.

##### Context store to use
This determines which context store will be used to hold the queue.  See the docs on [node-red-context-stores](https://nodered.org/docs/user-guide/context#context-stores). If a persistent context store is selected then the queue will be retained over a node-red restart or a power failure.

### Inputs

If `msg.control` (or whatever property has been configured as the Control property as above) is not present in the message then the message will be passed on to the next node in the flow (such as an email node) for delivery to its destination.  If there are already messages queued then it will be added to the queue rather than being passed on.

If `msg.control` is present then its value should be either that configured as Value for Success or Value for Failure as described above.  
If it is the Success value then that indicates that the message has been successfully delivered, it will be removed from the queue of waiting messages and the next one (if any) will be sent.
If it is the Failure value than the message will remain in the queue and sending will be retried after the configured Retry Period, or if the node is passed another message to be sent.  No message will be sent until all preceding messages have been successfully sent.

### Examples

See the [node's readme](https://github.com/colinl/node-red-guaranteed-delivery/) for details of importable example flows.
",
        "category": "function",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "6a3f78ab.f6b8e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 140,
                "wires": [
                    {
                        "id": "6a3f78ab.f6b8e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "controlProperty",
                "type": "str",
                "value": "control",
                "ui": {
                    "label": {
                        "en-US": "Property for OK or FAIL"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "OKValue",
                "type": "str",
                "value": "OK",
                "ui": {
                    "label": {
                        "en-US": "Value for success"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "FAILValue",
                "type": "str",
                "value": "FAIL",
                "ui": {
                    "label": {
                        "en-US": "Value for failure"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "retrySecs",
                "type": "num",
                "value": "60",
                "ui": {
                    "label": {
                        "en-US": "Retry period (secs)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "timeout",
                "type": "num",
                "value": "120",
                "ui": {
                    "label": {
                        "en-US": "Fail timeout (secs)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "maxQueue",
                "type": "num",
                "value": "100",
                "ui": {
                    "label": {
                        "en-US": "Max messages in queue"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "contextStore",
                "type": "str",
                "value": "default",
                "ui": {
                    "label": {
                        "en-US": "Context Store to use"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "@colinl/guaranteed-delivery",
            "type": "guaranteed-delivery",
            "version": "1.0.0",
            "author": "Colin Law",
            "desc": "Guaranteed delivery of messages",
            "keywords": "node-red, delivery",
            "license": "Apache-2.0"
        },
        "color": "#3FADB5",
        "icon": "font-awesome/fa-long-arrow-right",
        "status": {
            "x": 420,
            "y": 80,
            "wires": [
                {
                    "id": "ed779289.25b5d8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "6a3f78ab.f6b8e",
        "type": "function",
        "z": "149380c1.63e107",
        "name": "State machine",
        "func": "let store = env.get(\"contextStore\")
if (store === \"default\") store = null
// These are initialised in On Start
let stat = flow.get(\"stat\", store)
let tickID = flow.get(\"tickID\")

// can't use a switch here I think as need to compare against env value
const control = msg[env.get(\"controlProperty\")]

if (control === env.get(\"OKValue\")) {
    handleOK(stat)
} else if (control === env.get(\"FAILValue\")) {
    handleFAIL(stat)
} else if (control === \"__tick\") {
    handleRetryTick(stat)
} else {
    // no valid control value so must be incoming message
    handleMessage(msg, stat)
}
//node.warn(`state: ${stat.state}`)
// decide what to do next based on the new state
switch (stat.state) {
    case \"initial\":
    case \"waitingForMsg\":
        sendMsg(stat)   // send next message if any
        if (stat.state == \"waitingForOKFail\") {
            // we have sent a message so start the timeout timer if required
            // there should not be a timer running already
            if (tickID) {
                node.warn(`Guaranteed delivery timer already running when it should not be ${tickID}`)
                clearTimeout(tickID)
            }
            const timeout = env.get(\"timeout\")
            if (timeout) {
                //node.warn(`starting timer`)
                tickID = setTimeout( handleTimeout, timeout*1000)
                flow.set(\"tickID\", tickID )
            }
        }
        break;
        
    case \"waitingForRetryTick\":
    case \"waitingForOKFail\":
        // do nothing
        break;
}
node.status( `${stat.queue.length} ${stat.state}` )
flow.set(\"stat\", stat, store)
return null;

// Called when message to be queued is received
function handleMessage(msg, stat) {
    //node.warn(\"handleMessage\")
    // push a clone onto the queue
    stat.queue.push(RED.util.cloneMessage(msg))
    // limit number in queue
    const max = Number(env.get(\"maxQueue\"))
    if (!isNaN(max) && max > 0) {
        // max length hit, remove oldest
        if (stat.queue.length > max) stat.queue.shift()
    }
    // Simulate a RetryTick event to handle any state change needed
    handleRetryTick(stat)
}

// Called to send the next message off the queue if any, but leaves it on queue
// If it sends a message then it starts the timeout (if any) running and returns the handle
function sendMsg(stat) {
    //node.warn(\"sendMsg\")
    let thisMsg = stat.queue[0]
    if (thisMsg) {
        // send a clone
        //node.warn(\"sending\")
        node.send(RED.util.cloneMessage(thisMsg))
        stat.state = \"waitingForOKFail\"
    } else {
        // nothing in queue
        stat.state = \"waitingForMsg\"
    }
}

// Called when OK response received
function handleOK(stat) {
    //node.warn(\"handleOK\")
    // ignore if in wrong state
    if (stat.state === \"waitingForOKFail\") {
        // OK received so drop the top message 
        stat.queue.shift()
        // stop the timer
        if (tickID) {
            clearTimeout(tickID)
            flow.set(\"tickID\", 0 )
            tickID = 0
        }
        // set the state to waiting for message, which will allow the next one to be sent
        stat.state = \"waitingForMsg\"
    } else {
        node.warn(\"Guaranteed delivery - ignoring unnexpected OK\")
    }
}

// Called when FAIL response received
function handleFAIL(stat) {
    //node.warn(\"handleFAIL\")
    // ignore if in wrong state
    if (stat.state === \"waitingForOKFail\") {
        // FAIL received so stop timer and go to waiting for RetryTick state
        if (tickID) {
            clearTimeout(tickID)
            flow.set(\"tickID\", 0 )
            tickID = 0
        }
        stat.state = \"waitingForRetryTick\"
    } else {
        node.warn(\"Guaranteed delivery - ignoring unnexpected FAIL\")
    }
}

// Called when a RetryTick message is received or after a new incoming message is queued
function handleRetryTick(stat) {
    //node.warn(\"handleRetryTick\")
    if (stat.state === \"waitingForRetryTick\") {
        //node.warn(\"state to waiting\")
        // set it to watitingForMsg in order to force send 
        stat.state = \"waitingForMsg\"
    }
    // ignore for other states
}

// called when no OK or FAIL has been received after the specied timeout
function handleTimeout() {
    //node.warn(`handleTimeout ${stat.state}`)
    // ignore if state not waiting for ok/fail
    if ( stat.state === \"waitingForOKFail\" ) {
        //node.warn(`Timeout waiting for OK/FAIL`)
        // simulate a fail, just change the state to WaitingForRetryTick
        stat.state = \"waitingForRetryTick\"
        flow.set(\"stat\", stat, store)
        node.status( `${stat.queue.length} ${stat.state}` )
    }
    flow.set(\"tickID\", 0 )
    tickID = 0
}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Initalise context data as appropriate
let cStore = env.get(\"contextStore\")
if (cStore === \"default\") cStore = null
let stat = flow.get(\"stat\", cStore) || {state: \"initial\", queue: []}
// force state to initial in case we were stopped in the middle of doing something and the store is persistent
// keep the queue obviously
stat.state = \"initial\"
flow.set(\"stat\", stat, cStore)
// clear the timout ticker in case the default store is persistent
flow.set(\"tickID\", 0)",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "602725f6.15eee4",
        "type": "inject",
        "z": "149380c1.63e107",
        "name": "Retry ",
        "props": [
            {
                "p": "${controlProperty}",
                "v": "__tick",
                "vt": "str"
            }
        ],
        "repeat": "${retrySecs}",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "6a3f78ab.f6b8e"
            ]
        ]
    },
    {
        "id": "ed779289.25b5d8",
        "type": "status",
        "z": "149380c1.63e107",
        "name": "",
        "scope": [
            "6a3f78ab.f6b8e"
        ],
        "x": 300,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "942a39d9fd40c8ca",
        "type": "subflow:149380c1.63e107",
        "z": "bdd7be38.d3b55",
        "g": "c7783f078c2779c4",
        "name": "",
        "env": [
            {
                "name": "retrySecs",
                "value": "20",
                "type": "num"
            },
            {
                "name": "timeout",
                "value": "10",
                "type": "num"
            }
        ],
        "x": 660,
        "y": 4980,
        "wires": [
            [
                "74d43e94d1ab0916"
            ]
        ]
    },
    {
        "id": "b39ee7fb2a8b6520",
        "type": "inject",
        "z": "bdd7be38.d3b55",
        "g": "c7783f078c2779c4",
        "name": "Send test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "to",
                "v": "clanlaw@gmail.com",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "email subject",
        "payload": "This is the email contents",
        "payloadType": "str",
        "x": 140,
        "y": 4980,
        "wires": [
            [
                "6db06311eb1ad06e"
            ]
        ]
    },
    {
        "id": "6db06311eb1ad06e",
        "type": "function",
        "z": "bdd7be38.d3b55",
        "g": "c7783f078c2779c4",
        "name": "Message counter",
        "func": "let count = context.get(\"count\") || 0
msg.payload = `Message number ${count}`
context.set(\"count\", count + 1)
return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 370,
        "y": 4980,
        "wires": [
            [
                "942a39d9fd40c8ca"
            ]
        ]
    },
    {
        "id": "579e484c5f397f83",
        "type": "change",
        "z": "bdd7be38.d3b55",
        "g": "c7783f078c2779c4",
        "name": "OK",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "OK",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 5060,
        "wires": [
            [
                "6db06311eb1ad06e"
            ]
        ]
    },
    {
        "id": "3c72118d0c1de09a",
        "type": "change",
        "z": "bdd7be38.d3b55",
        "g": "c7783f078c2779c4",
        "name": "FAIL",
        "rules": [
            {
                "t": "set",
                "p": "control",
                "pt": "msg",
                "to": "FAIL",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 5100,
        "wires": [
            [
                "6db06311eb1ad06e"
            ]
        ]
    },
    {
        "id": "aca8304f8d733744",
        "type": "inject",
        "z": "bdd7be38.d3b55",
        "g": "c7783f078c2779c4",
        "name": "OK",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 5060,
        "wires": [
            [
                "579e484c5f397f83"
            ]
        ]
    },
    {
        "id": "329b1ce0fc790e0b",
        "type": "inject",
        "z": "bdd7be38.d3b55",
        "g": "c7783f078c2779c4",
        "name": "FAIL",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 5100,
        "wires": [
            [
                "3c72118d0c1de09a"
            ]
        ]
    },
    {
        "id": "74d43e94d1ab0916",
        "type": "debug",
        "z": "bdd7be38.d3b55",
        "g": "c7783f078c2779c4",
        "name": "SEND",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 4980,
        "wires": []
    }
]